// Configuration pour le build
buildscript {
    ext.springBootVersion = '1.2.0.RELEASE'

	repositories {
        mavenLocal()
        mavenCentral()
	}
	dependencies {
		// Add build plugins here
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

// Configuration de tous les projets
configure(allprojects) {
	group = 'org.arig.robot'
	version = '1.0.0-SNAPSHOT'
	
	// Variable de configuration
	ext {
		// Project dependencies
		javaVersion = '1.8'
		javaTestVersion = javaVersion

		// Dependencies versions
		lombokVersion = '1.14.8'

		// ARIG dependencies
		robotSystemLibVersion = '1.1.0-SNAPSHOT'

		// Test dependencies versions
		junitVersion = '4.12'
	}

	// Plugin de build
	apply plugin: 'java'
	apply plugin: 'maven'
	
	// Plugin pour les IDE
    apply plugin: 'idea'
	
	// Définition de configurations supplémentaire (non standard)
	configurations {
        provided
    }
	
	// Version pour la compilation
	compileJava {
		sourceCompatibility = javaVersion
		targetCompatibility = javaVersion
	}

	compileTestJava {
		sourceCompatibility = javaTestVersion
		targetCompatibility = javaTestVersion
	}	
	
	// Classpath de compilation
	sourceSets {
        main {
            compileClasspath += configurations.provided
        }
        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }
    }
	
	// Configuration des repository de dépendences
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.opengeo.org/" }
    }

	// Intégration avec IntellijIDEA
	idea {
        project {
            // Java configuration
            //jdkName = javaVersion
            //languageLevel = javaVersion

            // Gestionnaire de source
            //vcs = 'Git'
        }

        module {
            downloadJavadoc = true
            downloadSources = true

            scopes.PROVIDED.plus += [configurations.provided]
        }
    }
}

// Configuration communes des sous projets Java
configure(subprojects.findAll { it.name.indexOf("-gui") == -1 }) { subproject ->
    // Les projets non GUI sont package avec Spring Boot
    apply plugin: 'spring-boot'

	// Configuration de la construction des Jars
	jar {
		manifest.attributes["Implementation-Title"] = subproject.name
		manifest.attributes["Implementation-Version"] = subproject.version
		manifest.attributes["Created-By"] = "Gradle " + gradle.gradleVersion
		manifest.attributes["Build-Jdk"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
	}
	
	// Configuration pour la Javadoc
	javadoc {
		classpath = project.sourceSets.main.compileClasspath + configurations.provided
	
		options {
			memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
			author = true
			header = project.name
		}
	}

	// Construction du jar de source
	task sourcesJar(type: Jar, dependsOn:classes) {
		classifier = "sources"
		from sourceSets.main.allJava.srcDirs
		include "**/*.java"
	}
	
	// Construction du jar de javadoc
	task javadocJar(type: Jar) {
		classifier = "javadoc"
		from javadoc
	}
	
	// Liste des artéfact
	artifacts {
		archives sourcesJar
		archives javadocJar
	}

    // Dependence commune pour tous les projets
    dependencies {
        provided(
            [group: 'org.projectlombok', name: 'lombok', version: lombokVersion]
        )

        testCompile(
            [group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion]
        )
    }
}

// Configuration communes des sous projets GUI (Dart)
configure(subprojects.findAll { it.name.indexOf("-gui") != -1 }) { subproject ->
    jar {
        manifest.attributes["Implementation-Title"] = subproject.name
        manifest.attributes["Implementation-Version"] = subproject.version
        manifest.attributes["Created-By"] = "Gradle " + gradle.gradleVersion
        manifest.attributes["Build-Dart"] = ""
        manifest.attributes["Build-Jdk"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"

        from 'build/web'
        eachFile { details ->
            details.path = details.path.startsWith('META-INF') ?: 'static/' + details.path
        }
        // Jar contains duplicate empty folders, see Gradle issue:
        // http://issues.gradle.org/browse/GRADLE-1830
        // so we need to set includeEmptyDirs to false
        includeEmptyDirs = false
    }

    task pubVersion(type: Exec) {
        String osName = System.getProperty("os.name").toLowerCase()
        if (osName.contains("windows")) {
            commandLine 'cmd', '/c', 'pub', 'version'
        } else {
            commandLine 'pub', 'version'
        }

        standardOutput = new ByteArrayOutputStream()
        ext.output = {
            return standardOutput.toString()
        }
    }

    task pubClean(type: Delete) {
        delete 'build'
    }

    // We build in debug mode in order to have .dart files copied to build directory by pub
    task pubBuild(type: Exec, dependsOn: pubVersion) {
        String osName = System.getProperty("os.name").toLowerCase()
        if (osName.contains("windows")) {
            commandLine 'cmd', '/c', 'pub', 'get'
            commandLine 'cmd', '/c', 'pub', 'build', '--mode=debug'
        } else {
            commandLine 'pub', 'get'
            commandLine 'pub', 'build', '--mode=debug'
        }
    }

    jar.dependsOn pubBuild
    clean.dependsOn pubClean
}

// Configuration du projet racine
configure(rootProject) {
	description = "ARIG Association - Prehistobot projects"

	// Suppression des artéfact par défaut sur le rootProject (jar, etc...)
	configurations.archives.artifacts.clear()

	task wrapper(type: Wrapper) {
		description = "Generates gradlew[.bat] scripts"
		gradleVersion = "2.2.1"
	}
}
