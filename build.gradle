// Configuration pour le build
buildscript {
	repositories {
        mavenLocal()
        mavenCentral()
	}
	dependencies {
		// Add build plugins here
	}
}

// Configuration des repository de dépendences
repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.opengeo.org/" }
    maven { url "https://oss.sonatype.org/content/groups/public" }
}

// Configuration général
description = "ARIG Association - Eurobot Nerell"
group = 'org.arig.robot'
version = '1.0.0-SNAPSHOT'

// Variable de configuration
ext {
    // Project dependencies
    javaVersion = '1.8'
    javaTestVersion = javaVersion

    // Dependencies versions
    lombokVersion = '1.16.2'
    springVersion = '4.1.6.RELEASE'
    jacksonVersion = '2.5.1'
    pi4jVersion = '1.0-SNAPSHOT'

    // Container dependencies
    jettyVersion = '9.2.9.v20150224'

    // ARIG dependencies
    robotSystemLibVersion = '1.1.0-SNAPSHOT'

    // Test dependencies versions
    junitVersion = '4.12'
}

// Plugin de build
apply plugin: 'java'
apply plugin: 'maven'

// Plugin pour les IDE
apply plugin: 'idea'

// Définition de configurations supplémentaire (non standard)
configurations {
    provided
}

// Version pour la compilation
compileJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

compileTestJava {
    sourceCompatibility = javaTestVersion
    targetCompatibility = javaTestVersion
}

// Classpath de compilation
sourceSets {
    main {
        compileClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

// Intégration avec IntellijIDEA
idea {
    project {
        // Java configuration
        //jdkName = javaVersion
        //languageLevel = javaVersion

        // Gestionnaire de source
        //vcs = 'Git'
    }

    module {
        downloadJavadoc = true
        downloadSources = true

        scopes.PROVIDED.plus += [configurations.provided]
    }
}

// Configuration de la construction des Jars
jar {
    manifest.attributes["Implementation-Title"] = project.name
    manifest.attributes["Implementation-Version"] = project.version
    manifest.attributes["Created-By"] = "Gradle " + gradle.gradleVersion
    manifest.attributes["Build-Jdk"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
    manifest.attributes["Main-Class"] = "org.arig.eurobot.RobotApplication"
}

// Configuration pour la Javadoc
javadoc {
    classpath = project.sourceSets.main.compileClasspath + configurations.provided

    options {
        memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        author = true
        header = project.name
    }
}

// Dependence commune pour tous les projets java
dependencies {
    provided(
            [group: 'org.projectlombok', name: 'lombok', version: lombokVersion]
    )

    compile(
            [group: 'org.eclipse.jetty', name: 'jetty-server', version: jettyVersion],
            [group: 'org.eclipse.jetty', name: 'jetty-webapp', version: jettyVersion],
            [group: 'org.eclipse.jetty', name: 'jetty-annotations', version: jettyVersion],
            [group: 'org.springframework', name: 'spring-webmvc', version: springVersion],
            [group: 'org.arig.robot', name: 'robot-system-lib-raspi', version: robotSystemLibVersion],
            [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion],
            [group: 'com.pi4j', name: 'pi4j-gpio-extension', version: pi4jVersion]
    )

    testCompile(
            [group: 'org.springframework', name: 'spring-test', version: springVersion],
            [group: 'junit', name: 'junit', version: junitVersion]
    )
}

// Construction du jar de source
task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = "sources"
    from sourceSets.main.allJava.srcDirs
    include "**/*.java"
}

// Construction du jar de javadoc
task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

// Tâche de copy des dépendances
task copyDependencies(type: Copy) {
    into "$buildDir/dependencies"
    from configurations.runtime
}

// Installation de Gradle Wrapper
task wrapper(type: Wrapper) {
    description = "Generates gradlew[.bat] scripts"
    gradleVersion = "2.3"
}

// Liste des artéfact
artifacts {
    archives sourcesJar
    archives javadocJar
}
